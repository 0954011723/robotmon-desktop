robotmon_raw:getScreenSize:
  body:
    - var ${1:whSize} = getScreenSize();
    - var width = ${1}.width;
    - var height = ${1}.height;
  description: "#### `getScreenSize()`
\n
\nReturns `Object` - `{width: Integer, height: Integer}`
\n
\n```javascript
\nvar sizeObj = getScreenSize();
\nconsole.log(sizeObj.width, sizeObj.height);
\n// 1080 1920
\n```"

robotmon_raw:getScreenshot:
  body:
    - var ${1:img} = getScreenshot();
    - 
    - releaseImage(${1});
  description: "#### `getScreenshot()`
\n
\nReturns `Integer` - The image pointer
\n
\n```javascript
\nvar img = getScreenshot();
\nconsole.log(img);
\n// 122344533 <- image pointer
\nreleaseImage(img); // Don't forgot release a pointer
\n```"

robotmon_raw:getScreenshotModify:
  body:
    - var ${1:img} = getScreenshotModify(${2:cropX}, ${3:cropY}, ${4:cropWidth}, ${5:cropHeight}, ${6:resizeWidth}, ${7:resizeHeight}, ${8:quality}); 
    - 
    - releaseImage(${1});
  description: "#### `getScreenshotModify(cropX, cropY, cropWidth, cropHeight, resizeWidth, resizeHeight, qualitys)`
\n
\nGet screenshot, crop and resize. For speeding up screenshot.
\n
\n* `cropX` Integer
\n* `cropY` Integer
\n* `cropWidth`  Integer
\n* `cropHeight` Integer
\n* `resizeWidth` Integer
\n* `resizeHeight` Integer
\n* `quality` Integer
\n
\nReturns `Integer` - The image pointer
\n
\n```javascript
\nvar image = getScreenshotModify(200, 200, 100, 100, 50, 50, 80);
\nconsole.log(image); // image width = 50, height = 50 
\n// 12333122
\nreleaseImage(image);
\n```"

robotmon_raw:execute:
  body:
    - var ${1:lines} = execute(${2:command});
  description: "#### `execute(command)`
\n
\nCall exec command in android system. It's permission is same as `adb shell`
\n
\n* `command` String
\n
\nReturns `String` - The result of the execution
\n
\n```javascript
\nvar result = execute(\"ls -al /sdcard\");
\nconsole.log(result);
\n// drwxr-xr-x   2 root  root    64B 12 14 23:44 Robotmon
\n```"

robotmon_raw:tap:
  body:
    - tap(${1:x}, ${2:y}, ${3:during});
  description: "#### `tap(x, y, during)`
\n
\nSimulate a tap event
\n
\n* `x` Integer
\n* `y` Integer
\n* `during` Integer
\n
\n```javascript
\ntap(200, 200, 10);
\n// Will inject a tap down and a tap up event to system
\n```"

robotmon_raw:tapDown:
  body:
    - tapDown(${1:x}, ${2:y}, ${3:during}, ${4:id});
  description: "#### `tapDown(x, y, during, id)`
\n
\n* `x` Integer
\n* `y` Integer
\n* `during` Integer
\n* `id` Integer finger index
\n
\n```javascript
\ntapDown(200, 200, 40, 0);
\n// Will inject a tapDown event to system
\n```"

robotmon_raw:tapUp:
  body:
    - tapUp(${1:x}, ${2:y}, ${3:during}, ${4:id});
  description: "#### `tapUp(x, y, during, id)`
\n
\n* `x` Integer
\n* `y` Integer
\n* `during` Integer
\n* `id` Integer finger index
\n
\n```javascript
\ntapUp(200, 200, 40);
\n// Will inject a tapUo event to system
\n```"

robotmon_raw:moveTo:
  body:
    - moveTo(${1:x}, ${2:y}, ${3:during}, ${4:id});
  description: "#### `moveTo(x, y, during, id)`
\n
\nmoveTo should be betewwn `tapDown` and `tapUp`
\n
\n* `x` Integer
\n* `y` Integer
\n* `during` Integer
\n* `id` Integer finger index
\n
\n```javascript
\ntapDown(500, 300, 40);
\nmoveTo(500, 600, 40);
\ntapUp(500, 600, 40);
\n// Will inject a swipe down event
\n```"

robotmon_raw:swipe:
  body:
    - swipe(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:during});
  description: "#### `swipe(x1, y1, x2, y2, during)`
\n
\nSimulate a swipe event, using `tapDown`, `moveTo` and `tapUp` event. This function may not work in some game, you should implement yourself.
\n
\n* `x1` Integer
\n* `y1` Integer
\n* `x2` Integer
\n* `y2` Integer
\n* `during` Integer
\n
\n```javascript
\nswipe(500, 300, 40); // same as above example
\n// Will inject a swipe down event
\n```"

robotmon_raw:keycode:
  body:
    - keycode(${1|"KEYCODE_","KEYCODE_HOME","KEYCODE_BACK","KEYCODE_MENU","KEYCODE_VOLUME_UP","KEYCODE_VOLUME_DOWN"|}, ${2:during});
  description: "#### `keycode(label, during)`
\n
\nSend a key code event to system
\nLike adb shell input keyevent command
\n[Android Keycode List](https://developer.android.com/reference/android/view/KeyEvent.html)
\n
\n* `label` String
\n* `during` Integer
\n
\n```javascript
\nkeycode('HOME', 40); // same as keycode('KEYCODE_HOME', 40);
\n// Will send a HOME event to system
\n```"

robotmon_raw:typing:
  body:
    - typing(${1:words}, ${2:during});
  description: "#### `typing(words, during)`
\n
\nOnly allow English words
\n
\n* `words` String
\n* `during` Integer
\n
\n```javascript
\ntyping('Hello!', 100);
\n// Will type 'H' 'e' 'l' 'l' 'o' '!' 6 words
\n```"

robotmon_raw:clone:
  body:
    - var ${1:copyImg} = clone(${2:sourceImg});
    -
    - releaseImage(${1});
  description: "#### `clone(sourceImg)`
\n
\nDuplicate an image to another.
\n
\n* `sourceImg` Integer
\n
\nReturns `Integer` - The image pointer
\n
\n```javascript
\nvar oriImage = getScreenshot();
\nfor (var i = 0; i < 10; i++) {
\n  var cloneImage = clone(oriImage);
\n  // modify clone Image here
\n  smooth(cloneImage, 1, 5); // blur
\n  release(cloneImage);
\n}
\nrelease(oriImage);
\n```"

robotmon_raw:smooth:
  body:
    - smooth(${1:sourceImage}, ${2|smoothType,0,1,2,3,4|}, ${3:size});
  description: "#### `smooth(sourceImg, smoothType, size)`
\n
\nSame as OpenCV `smooth()` function.
\n
\n* `sourceImg` Integer
\n* `smoothType` Integer
\n* `size` Integer
\n
\n|smoothType|description|
\n|---|---|
\n|0|CV_BLUR_NO_SCALE|
\n|1|CV_BLUR|
\n|2|CV_GAUSSIAN|
\n|3|CV_MEDIAN|
\n|4|CV_BILATERAL|
\n
\n```javascript
\nvar img = getScreenshot();
\nsmooth(img, 2, 5); // Gaussian blur
\nsaveImage(img, getStoragePath + '/smooth.png');
\nreleaseImage(img);
\n```"

robotmon_raw:convertColor:
  body:
    - convertColor(${1:sourceImage}, ${2|toType,40,52|});
  description: "#### `convertColor(sourceImg, code)`
\n
\nSame as OpenCV `cvtColor()`. Not support different channels. If you want to convert to gray, please use bgrToGray.
\nNote that `getScreenshot` and `getScreenshotModify` is BGR order;
\n
\n* `sourceImg` Integer
\n* `code` Integer
\n
\n|code|description|
\n|---|---|
\n|40|CV_BGR2HSV|
\n|52|CV_BGR2HLS|
\n
\nSee more: [OpenCV Types](https://github.com/opencv/opencv/blob/2.4/modules/imgproc/include/opencv2/imgproc/types_c.h)
\n
\n```javascript
\nvar img = getScreenshot();
\n// Convert BGR to HSV color
\nconvertColor(img, 40);
\nreleaseImage(img);
\n```"

robotmon_raw:bgrToGray:
  body:
    - var ${1:grayImage} = bgrToGray(${2:sourceImage});
    -
    - releaseImage(${1});
  description: "#### `bgrToGray(sourceImg)`
\n
\nConvert form bgr (3 channels) to gray (1 channel).
\n
\n* `sourceImg` Integer
\n
\nReturns `Integer` - The gray image pointer
\n
\n```javascript
\nvar img = getScreenshot();
\nvar gray = bgrToGray(img); // gray image
\nreleaseImage(img);
\nreleaseImage(gray);
\n```"

robotmon_raw:absDiff:
  body:
    - var ${1:diffMat} = absDiff(${2:sourceImage}, ${3:targetImage});
    -
    - releaseImage(${1});
  description: "#### `absDiff(sourceImg, targetImg)`
\n
\nSame as OpenCV `adbdiff()`.
\n
\n* `sourceImg` Integer
\n* `targetImg` Integer
\n
\nReturns `Integer` - The image pointer of the difference
\n
\n```javascript
\nvar img1 = getScreenshot();
\nsleep(100);
\nvar img2 = getScreenshot();
\nvar diff = absDiff(img1, img2); // in gray order
\nreleaseImage(img1);
\nreleaseImage(img2);
\nreleaseImage(diff);
\n```"

robotmon_raw:threshold:
  body:
    - threshold(${1:sourceImage}, ${2:threshold}, ${3:maxThreshold}, 0);
  description: "#### `threshold(sourceImg, thr, maxThr, code)`
\n
\nSame as OpenCV `threshold()`.
\n
\n* `sourceImg` Integer
\n* `thr` Float
\n* `maxThr` Float
\n* `code` Integer
\n
\n|code|description|
\n|---|---|
\n|0|CV_THRES_BINARY|
\n
\nSee more: [OpenCV Types](https://github.com/opencv/opencv/blob/2.4/modules/imgproc/include/opencv2/imgproc/types_c.h)
\n
\n```javascript
\nkeycode('MENU');
\nsleep(1000);
\nvar img1 = getScreenshot();
\nkeycode('HOME');
\nsleep(1000);
\nvar img2 = getScreenshot();
\nvar diff = absDiff(img1, img2); // in gray order
\nthreshold(diff, 100, 255); // set to 0 if <= 100, set to 255 if > 100
\nvar value = getImageColor(diff, 500, 200); // value => {r\":255,\"g\":0,\"b\":0\",\"a\":0}
\nconsole.log(value['r']); // current diff value is show on 'r'
\n// 255
\nreleaseImage(img1);
\nreleaseImage(img2);
\nreleaseImage(diff);
\n```"

robotmon_raw:eroid:
  body:
    - eroid(${1:sourceImage}, ${2:width}, ${3:height}, ${4:x}, ${5:y});
  description: "#### `eroid(sourceImg, width, height, x, y)`
\n
\nSame as OpenCV `eroid`.
\n
\n`width`, `height`, `x`, `y` is `getStructuringElement()` parameters.
\n
\n* `sourceImg` Integer
\n* `width` Integer
\n* `height` Integer
\n* `x` Integer
\n* `y` Integer
\n
\n```javascript
\nvar img = getScreenshot();
\nthreshold(img, 100, 255);
\neroid(img, 3, 3, 1, 1);
\nsaveImage(img, getStoragePath() + '/test_eroid.png');
\nreleaseImage(img);
\n```"

robotmon_raw:dilate:
  body:
    - dilate(${1:sourceImage}, ${2:width}, ${3:height}, ${4:x}, ${5:y});
  description: "#### `dilate(sourceImg, width, height, x, y)`
\n
\nSame as OpenCV `dilate`.
\n
\n`width`, `height`, `x`, `y` is `getStructuringElement()` parameters.
\n
\n* `sourceImg` Integer
\n* `width` Integer
\n* `height` Integer
\n* `x` Integer
\n* `y` Integer
\n
\n```javascript
\nvar img = getScreenshot();
\nthreshold(img, 100, 255);
\ndilate(img, 3, 3, 1, 1);
\nsaveImage(img, getStoragePath() + '/test_dilate.png');
\nreleaseImage(img);
\n```"

robotmon_raw:inRange:
  body:
    - var ${1:filteredImage} = inRange(${2:sourceImage}, ${3:minB}, ${4:minG}, ${5:minR}, ${6:minA}, ${7:maxB}, ${8:maxG}, ${9:maxR}, ${10:maxA});
    -
    - releaseImage(${1});
  description: "#### `inRange(sourceImg, minB, minG, minR, minA, maxB, maxG, maxR, maxA)`
\n
\nSame as OpenCV `inRange + clone + mask`. Filter with range color and clone to new image.
\n
\n* `sourceImg` Integer
\n* `minB` Integer
\n* `minG` Integer
\n* `minR` Integer
\n* `minA` Integer
\n* `maxB` Integer
\n* `maxG` Integer
\n* `maxR` Integer
\n* `maxA` Integer
\n
\nReturns `Integer` - The filtered image pointer
\n
\n```javascript
\nvar img = getScreenshot();
\nvar filteredImg = inRange(img, 0, 255, 255, 255, 255, 255, 255, 255); // only keep blue color pixel
\nsaveImage(filteredImg, getStoragePath() + '/test_filterd.png');
\nreleaseImage(img);
\nreleaseImage(filteredImg);
\n```"

robotmon_raw:outRange:
  body:
    - var ${1:filteredImage} = outRange(${2:sourceImage}, ${3:minB}, ${4:minG}, ${5:minR}, ${6:minA}, ${7:maxB}, ${8:maxG}, ${9:maxR}, ${10:maxA});
    -
    - releaseImage(${1});
  description: "#### `outRange(sourceImg, minB, minG, minR, minA, maxB, maxG, maxR, maxA)`
\n
\nSame as OpenCV `inRange + clone + not + mask`. Filter without range color and clone to new image.
\n
\n* `sourceImg` Integer
\n* `minB` Integer
\n* `minG` Integer
\n* `minR` Integer
\n* `minA` Integer
\n* `maxB` Integer
\n* `maxG` Integer
\n* `maxR` Integer
\n* `maxA` Integer
\n
\nReturns `Integer` - The filtered image pointer
\n
\n```javascript
\nvar img = getScreenshot();
\nvar filteredImg = outRange(img, 0, 255, 255, 255, 255, 255, 255, 255); // keep all but blue color
\nsaveImage(filteredImg, getStoragePath() + '/test_filterd.png');
\nreleaseImage(img);
\nreleaseImage(filteredImg);
\n```"

robotmon_raw:cloneWithMask:
  body:
    - var ${1:maskedImage} = cloneWithMask(${2:sourceImage}, ${3:maskMat});
    -
    - releaseImage(${1});
  description: "#### `cloneWithMask(sourceImg, mask)`
\n
\nSame as OpenCV `copyTo`. Clone image with mask (only support 1 channel)
\n
\n* `sourceImg` Integer
\n* `mask` Integer
\n
\nReturns `Integer` - new image pointer with mask
\n
\n```javascript
\nvar img1 = getScreenshot();
\nsleep(100);
\nvar img2 = getScreenshot();
\nvar diff = absDiff(img1, img2);
\nsleep(100);
\nvar img3 = cloneWithMask(img1, diff);
\nreleaseImage(img1);
\nreleaseImage(img2);
\nreleaseImage(img3);
\nreleaseImage(diff);
\n```"

robotmon_raw:houghCircles:
  body:
    - var ${1:pointsObj} = houghCircles(${2:sourceImage}, 3, ${3:dp}, ${4:p1}, ${5:p2}, ${6:minR}, ${7:maxR});
  description: "#### `houghCircles(sourceImg, method, dp, minDist, p1, p2, minR, maxR)`
\n
\nSame as OpenCV `houghCircles`. For finding circles.
\n
\n* `sourceImg` Integer
\n* `method` Integer (3 = CV_HOUGH_GRADIENT)
\n* `dp` Float (1) (ratio between input image and input params.)
\n* `minDist` Float (min distance between circles)
\n* `p1` Float (canny parameter)
\n* `p2` Float (canny parameter)
\n* `minR` Integer (min radius)
\n* `maxR` Integer (max radius)
\n
\nReturns `Object` - Array of circles
\n
\n```javascript
\nvar img = getScreenshot();
\nvar points = houghCircles(img, 3, 1, 8, 4, 8, 6, 14);
\nconsole.log(points); // {\"0\": {\"x\": 102, \"y\": \"233\", \"r\": 9}}
\nreleaseImage(img);
\n```"

robotmon_raw:canny:
  body:
    - var ${1:cannyMat} = canny(${2:sourceImage}, ${3:min}, ${4:max}, ${5:apertureSize});
    -
    - releaseImage(${1});
  description: "#### `canny(sourceImg, t1, t2, apertureSize)`
\n
\nSame as OpenCV `canny`
\n
\n* `sourceImg` Integer
\n* `t1` Float
\n* `t2` Float
\n* `apertureSize` Integer
\n
\nReturns `Integer` - The canny image pointer
\n
\n```javascript
\nvar img = getScreenshot();
\nthreshold(img, 30, 255);
\neroid(img, 5, 5, 1, 1);
\nvar cannyImg = canny(img, 50, 150, 3);
\nsaveImage(cannyImg, getStoragePath() + '/test_canny.png');
\nreleaseImage(img);
\nreleaseImage(cannyImg);
\n```"

robotmon_raw:findContours:
  body:
    - var ${1:resultContours} = findContours(${2:cannyMat}, ${3:minArea}, ${4:maxArea});
  description: "#### `findContours(cannyImgPtr, minArea, maxArea)`
\n
\nSame as OpenCV `findContours`.
\n
\n* `cannyImgPtr` Integer (Canny image as input)
\n* `minArea` Float
\n* `maxArea` Float
\n
\nReturns `Object` - `{\"0\": {x: Integer, y: Integer}`
\n
\n```javascript
\nvar img = getScreenshot();
\nthreshold(img, 30, 255);
\neroid(img, 5, 5, 1, 1);
\nvar cannyImg = canny(img, 50, 150, 3);
\nvar results = findContours(cannyImg, 1000, 10000); // area > 100
\nconsole.log(JSON.stringify(results));
\n// {\"0\":{x:537, y:1850},\"1\":{x:133, y:601}}
\nreleaseImage(img);
\nreleaseImage(cannyImg);
\n```"

robotmon_raw:drawCircle:
  body:
    - drawCircle(${1:sourceImage}, ${2:x}, ${3:y}, ${4:radius}, ${5:r}, ${6:g}, ${7:b}, ${8:a});
  description: "#### `drawCircle(sourceImg, x, y, radius, r, g, b, a)`
\n
\nDraw circle in an image.
\n
\n* `sourceImg` Integer
\n* `x` Integer
\n* `y` Integer
\n* `radius` Integer
\n* `r` Integer
\n* `g` Integer
\n* `b` Integer
\n* `a` Integer
\n
\n```javascript
\nvar img = getScreenshot();
\ndrawCircle(img, 100, 100, 10, 0, 0, 255, 0); // draw a blue circle
\nsaveImage(img, getStoragePath() + '/test_drawCircle.png');
\nreleaseImage(img);
\n```"

robotmon_raw:getIdentityScore:
  body:
    - var ${1:score} = getIdentityScore(${2:sourceImage1}, ${3:sourceImage2});
  description: "#### `getIdentityScore(sourceImg, targetImg)`
\n
\n* `sourceImg` Integer
\n* `targetImg` Integer
\n
\nReturns `Float` - The identity score
\n
\n```javascript
\nkeycode('MENU');
\nsleep(1000);
\nvar img1 = getScreenshot();
\nkeycode('HOME');
\nsleep(1000);
\nvar img2 = getScreenshot();
\nvar score = getIdentityScore(img1, img2);
\nconsole.log(score); // 0.6004924774169922
\nreleaseImage(img1);
\nreleaseImage(img2);
\n```"

robotmon_raw:cropImage:
  body:
    - var ${1:croppedImage} = cropImage(${2:sourceImage}, ${3:x}, ${4:y}, ${5:width}, ${6:height});
    -
    - releaseImage(${1});
  description: "#### `cropImage(sourceImg, x, y, width, height)`
\n
\nCrop image.
\n
\n* `x` Integer
\n* `y` Integer
\n* `width` Integer
\n* `height` Integer
\n
\nReturns `Integer` - The image pointer
\n
\n```javascript
\nvar img = getScreenshot();
\nvar cropImg = cropImage(img, 350, 550, 150, 150);
\nsaveImage(cropImg, getStoragePath() + '/test_crop.png');
\nreleaseImage(img);
\nreleaseImage(cropImg);
\n```"

robotmon_raw:findImage:
  body:
    - var ${1:foundResult} = findImage(${2:sourceImage}, ${3:targetImage});
    - var foundScore = ${1}.score;
    - var foundX = ${1}.x;
    - var foundY = ${1}.y;
  description: "#### `findImage(sourceImg, targetImg)`
\n
\nUsing OpenCV `Template Match` to fing image.
\n
\n* `sourceImg` Integer
\n* `targetImg` Integer
\n
\nReturns `Object` - `{x: Integer, y: Integer, score: Float}`
\n
\n```javascript
\nvar img = getScreenshot();
\nvar cropImg = cropImage(img, 350, 550, 150, 150);
\nvar result = findImage(img, cropImg);
\nconsole.log(JSON.stringify(result)); // {\"score\":0.9999997615814209,\"x\":350,\"y\":550}
\nreleaseImage(img);
\nreleaseImage(cropImg);
\n```"

robotmon_raw:findImages:
  body:
    - var ${1:foundResults} = findImages(${2:sourceImage}, ${3:targetImage}, ${4:scoreLimit}, ${5:resultCountLimit}, ${6|true,false|});
    - for (var k in ${1}) {
    - "\tvar ${1}Item = ${1}[k];"
    - "\tvar score = ${1}Item.score;"
    - "\tvar x = ${1}Item.x;"
    - "\tvar y = ${1}Item.y;"
    - "}"
  description: "#### `findImages(sourceImg, targetImg, scoreLimit, resultCountLimit, withoutOverlap)`
\n
\nSame as `findImage()`, but find mulitple times.
\n
\n* `sourceImg` Integer
\n* `targetImg` Integer
\n* `scoreLimit` Integer
\n* `resultCountLimit` Integer
\n* `withoutOverlap` Boolean
\n
\nReturns `String` - `{\"0\": {\"x\": Integer, \"y\": Integer, \"score\": Float}, \"1\": {\"x\": Integer, \"y\": Integer, \"score\": Float}}`, Key is String!
\n
\n```javascript
\nvar img = getScreenshot();
\nvar cropImg = cropImage(img, 350, 550, 150, 150);
\nvar result = findImages(img, cropImg, 0.95, 3, true);
\nconsole.log(JSON.stringify(result)); // {\"0\":{\"score\":0.9999997615814209,\"x\":350,\"y\":550}}
\nreleaseImage(img);
\nreleaseImage(cropImg);
\n```"

robotmon_raw:resizeImage:
  body:
    - var ${1:resizedImage} = resizeImage(${2:sourceImage}, ${3:width}, ${4:height});
    -
    - releaseImage(${1});
  description: "#### `resizeImage(sourceImg, width, height)`
\n
\nResize image.
\n
\n* `width` Integer
\n* `height` Integer
\n
\nReturns `Integer` - The image pointer
\n
\n```javascript
\nvar img = getScreenshot();
\nvar resizeImg = resizeImage(img, 108, 192);
\nsaveImage(resizeImg, getStoragePath() + '/test_resize.png');
\nreleaseImage(img);
\nreleaseImage(resizeImg);
\n```"

robotmon_raw:releaseImage:
  body:
    - releaseImage(${1:image});
  description: "#### `releaseImage(imgPtr)`
\n
\nVery Important! You should call this function with all imgPtrs.
\n
\n* `imgPtr` Integer
\n
\n```javascript
\nvar img = getScreenshot(); // keep in memory
\nreleaseImage(img); // release from memory
\n```"

robotmon_raw:getImageColor:
  body:
    - var ${1:color} = getImageColor(${1:sourceImage}, ${2:x}, ${3:y});
    - var r = ${1}.r;
    - var g = ${1}.g;
    - var b = ${1}.b;
  description: "#### `getImageColor(sourceImg, x, y)`
\n
\nGet color of point from an image.
\n
\n* `sourceImg` Integer
\n* `x` Integer
\n* `y` Integer
\n
\nReturns `Object` - `{r: Integer, g: Integer, b: Integer, a: Integer}`
\n
\n```javascript
\nvar img = getScreenshot();
\nvar color = getImageColor(img, 100, 100);
\nconsole.log(JSON.stringify(color)); // {\"a\":0,\"b\":21,\"g\":36,\"r\":198}
\nreleaseImage(img);
\n```"

robotmon_raw:getImageSize:
  body:
    - var ${1:whSize} = getImageSize(${2:sourceImage});
    - var width = ${1}.width;
    - var height = ${1}.height;
  description: "#### `getImageSize(imgPtr)`
\n
\n* `imgPtr` Integer
\n
\nReturns `Object` - `{width: Integer, height: Integer}`
\n
\n```javascript
\nvar img = getScreenshot();
\nvar size = getImageSize(img);
\nconsole.log(JSON.stringify(size)); // {\"height\":1920,\"width\":1080}
\nreleaseImage(img);
\n```"

robotmon_raw:saveImage:
  body:
    - saveImage(${1:sourceImage}, ${2|filename,getStoragePath()+'/filename'|}+'.jpg');
  description: "#### `saveImage(imgPtr, path)`
\n
\nSave image to disk.
\n
\n* `imgPtr` Integer
\n* `path` String
\n
\n```javascript
\nvar img = getScreenshot();
\nsaveImage(img, getStoragePath + '/test_save.png');
\nreleaseImage(img);
\n```"

robotmon_raw:openImage:
  body:
    - var ${1:image} = openImage(${2|filename,getStoragePath()+'/filename'|}+'.jpg');
    -
    - releaseImage(${1});
  description: "#### `openImage(path)`
\n
\nOpen image from disk.
\n
\n* `path` String
\n
\nReturns `Integer` - The image pointer
\n
\n```javascript
\nvar img = openImage(getStoragePath + '/test_save.png');
\nreleaseImage(img);
\n```"
 
robotmon_raw:sleep:
  body:
    - sleep(${1:milliseconds});
  description: "#### `sleep(milliseconds)`
\n
\nLike `sleep` function in C language, pause current process.
\n
\n* `milliseconds` Integer
\n
\n```javascript
\nconsole.log('Hello');
\nsleep(1000);
\nconsole.log('Andy');
\n```"

robotmon_raw:getStoragePath:
  body:
    - var ${1:storagePath} = getStoragePath();
  description: "#### `getStoragePath()`
\n
\nGet Robotmon folder. Like `/sdcard/Robotmon`.
\n
\nReturns `String` - The storage path
\n
\n```javascript
\nconsole.log(getStoragePath());
\n```"

robotmon_raw:getImageFromURL:
  body:
    - var ${1:image} = getImageFromURL("${2:imageUrl}");
    -
    - releaseImage(${1});
  description: "#### `getImageFromURL(url)`
\n
\nGet image from an url.
\n
\n* `url` String
\n
\nReturns `Integer` - The image pointer"

robotmon_raw:getImageFromBase64:
  body:
    - var ${1:image} = getImageFromBase64(${2:base64String});
    -
    - releaseImage(${1});
  description: "#### `getImageFromBase64(base64)`
\n
\nGet image from a base64 string.
\n
\n* `base64` String
\n
\nReturns `Integer` - The image pointer"

robotmon_raw:getBase64FromImage:
  body:
    - var ${1:base64String} = getBase64FromImage(${2:image});
  description: "#### `getBase64FromImage(imgPtr)`
\n
\nGet base64 string from an image.
\n
\n* `imgPtr` Integer
\n
\nReturns `String` - base64"

robotmon_raw:readFile:
  body:
    - var ${1:text} = readFile(${2|filename,getStoragePath()+'/filename'|}+'.txt');
  description: "#### `readFile(path)`
\n
\nRead a file as string.
\n
\n* `path` String
\n
\nReturns `String` - The text of the file"

robotmon_raw:writeFile:
  body:
    - writeFile(${1|filename,getStoragePath()+'/filename'|}+'.txt', ${2:text});
  description: "#### `writeFile(path, text)`
\n
\nWrite a string to a file.
\n
\n* `path` String
\n* `text` String"

robotmon_raw:encrypt:
  body:
    - var ${1:encryptedString} = encrypt(${2:string})
  description: "#### `encrypt(script)`
\n
\nEncrypted a string
\n
\n* `script` String
\n
\nReturns String - The encrypted script"

robotmon_raw:runEncryptedScript:
  body:
    - runEncryptedScript(${1:encryptedScript});
  description: "#### `runEncryptedScript(script)`
\n
\nRun a encrypted javascript string.
\n
\n* `script` String - The script is encrypted by `encrypt`"

robotmon_raw:runScript:
  body:
    - runScript(${1:script});
  description: "#### `runScript(script)`
\n
\nRun a javascript string.
\n
\n* `script` String"

robotmon_raw:httpClient:
  body:
    - var ${1:content} = httpClient(${2|'GET','POST'|}, ${3:url}, ${4|'',bodyString|}, ${5|{},headerObject|});
  description: "#### `httpClient(method, url, body, headers)`
\n
\nDo a http request.
\n
\n* `method` String
\n* `url` String
\n* `body` String
\n* `headers` Object
\n
\nReturns `String` - The result
\n
\n```javascript
\nhttpClient('GET', 'http://httpbin.org/get', '', {});
\nhttpClient('POST', 'http://httpbin.org/post', 'body data', {});
\nhttpClient('POST', 'http://httpbin.org/post', 'foo=bar&bar=foo', {'Content-Type': 'application/x-www-form-urlencoded'});
\n```"

robotmon_raw:importJS:
  body:
    - importJS(${1:library});
  description: "#### `importJS(library)`
\n
\nImport an JS library.
\n
\n* `library` String
\n
\n```javascript
\nimportJS('RBM-0.0.2') // import shared library in libs
\nimportJS('js/customerJS') // import local library
\n```"

robotmon_raw:getVirtualButtonHeight:
  body:
    - var ${1:height) = getVirtualButtonHeight();
  description: "#### `getVirtualButtonHeight()`
\n
\nReturns `Integer` - The height of the virtual button"

# robotmon_raw:example:
#   body:
#     -
#   description: ""

# robotmon_raw:example:
#   body:
#     - example(${1:sourceImage}, ${2:}, ${3:}, ${4:}, ${5:}, ${6:}, ${7:}, ${8:}, ${9:});
#   description: ""